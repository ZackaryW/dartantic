// dart format width=80
// GENERATED BY DARTANTIC

part of 'user_test.dart';

// **************************************************************************
// ModelGenerator
// **************************************************************************

final DttModelMeta _dtt_User_fieldMeta = DttModelMeta(
  fields: {
    'name': DttFieldMeta(
      type: 'String',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'age': DttFieldMeta(
      type: 'int',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'email': DttFieldMeta(
      type: 'String',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'password': DttFieldMeta(
      type: 'String',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'isActive': DttFieldMeta(
      type: 'bool',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'createdAt': DttFieldMeta(
      type: 'DateTime',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'updatedAt': DttFieldMeta(
      type: 'DateTime?',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'nickname': DttFieldMeta(
      type: 'String?',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
  },
);

mixin _$UserMixin {
  static Map<String, dynamic> dttCreate({
    required String name,
    required int age,
    required String email,
    required String password,
    required bool isActive,
    required DateTime createdAt,
    DateTime? updatedAt,
    String? nickname,
  }) {
    final values = <String, dynamic>{
      'name': name,
      'age': age,
      'email': email,
      'password': password,
      'isActive': isActive,
      'createdAt': createdAt,
      'updatedAt': updatedAt,
      'nickname': nickname,
    };
    final processedValues = dttPreprocess(values);
    dttValidate(processedValues);
    return dttPostprocess(processedValues);
  }

  static Map<String, dynamic> dttPreprocess(Map<String, dynamic> values) {
    // Preprocessing step - modify values before validation
    values['name'] = User._dttpreprocess_name(values['name']);
    values['email'] = User._dttpreprocess_email(values['email']);
    values['password'] = User._dttpreprocess_password(values['password']);
    return values;
  }

  static void dttValidate(Map<String, dynamic> values) {
    if (values['name'] != null && !validateCustomLength(values['name'])) {
      throw DttValidationError('name', 'name failed custom validation');
    }
    if (values['name'] != null && values['name'].length < 2) {
      throw DttValidationError('name', 'name must be at least 2 characters');
    }
    if (values['age'] == null) {
      throw DttValidationError('age', 'age is required');
    }
    if (values['email'] != null && !validateEmailFormat(values['email'])) {
      throw DttValidationError('email', 'email failed custom validation');
    }
    if (values['email'] != null && values['email'].length < 5) {
      throw DttValidationError('email', 'email must be at least 5 characters');
    }
    if (values['email'] != null && values['email'].length > 50) {
      throw DttValidationError('email', 'email must be at most 50 characters');
    }
    if (values['password'] != null &&
        !validateStrongPassword(values['password'])) {
      throw DttValidationError('password', 'password failed custom validation');
    }
    if (values['password'] != null && values['password'].length < 8) {
      throw DttValidationError(
        'password',
        'password must be at least 8 characters',
      );
    }
    if (values['nickname'] != null && values['nickname'].length < 3) {
      throw DttValidationError(
        'nickname',
        'nickname must be at least 3 characters',
      );
    }
    if (values['email'] != null &&
        !User._dttvalidate_email(values['email'], values)) {
      throw DttValidationError('email', 'email failed custom validation');
    }
    if (values['age'] != null && !User._dttvalidate_age(values['age'])) {
      throw DttValidationError('age', 'age failed custom validation');
    }
    if (values['name'] != null && !User._dttvalidate_name(values['name'])) {
      throw DttValidationError('name', 'name failed custom validation');
    }
  }

  static Map<String, dynamic> dttPostprocess(Map<String, dynamic> values) {
    // Postprocessing step - modify values after validation
    values['createdAt'] = User._dttpostprocess_createdAt(values['createdAt']);
    values['isActive'] = User._dttpostprocess_isActive(values['isActive']);
    return values;
  }

  static Map<String, dynamic> dttFromMap(Map<String, dynamic> map) {
    // Process and validate map data (including nested models)
    final processedMap = <String, dynamic>{
      'name': map['name'],
      'age': map['age'],
      'email': map['email'],
      'password': map['password'],
      'isActive': map['isActive'],
      'createdAt': map['createdAt'],
      'updatedAt': map['updatedAt'],
      'nickname': map['nickname'],
    };
    // Apply preprocessing, validation, and postprocessing to the processed map
    final preprocessed = dttPreprocess(processedMap);
    dttValidate(preprocessed);
    return dttPostprocess(preprocessed);
  }

  static Map<String, dynamic> dttToMap(User obj) {
    // Convert object instance to a map
    return {
      'name': obj.name,
      'age': obj.age,
      'email': obj.email,
      'password': obj.password,
      'isActive': obj.isActive,
      'createdAt': obj.createdAt,
      'updatedAt': obj.updatedAt,
      'nickname': obj.nickname,
    };
  }
}

final DttModelMeta _dtt_Profile_fieldMeta = DttModelMeta(
  fields: {
    'bio': DttFieldMeta(
      type: 'String',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'website': DttFieldMeta(
      type: 'String?',
      isFinal: true,
      isLate: false,
      subModel: null,
    ),
    'user': DttFieldMeta(
      type: 'User',
      isFinal: true,
      isLate: false,
      subModel: 'User',
    ),
  },
);

mixin _$ProfileMixin {
  static Map<String, dynamic> dttCreate({
    required String bio,
    String? website,
    required User user,
  }) {
    final values = <String, dynamic>{
      'bio': bio,
      'website': website,
      'user': user,
    };
    final processedValues = dttPreprocess(values);
    dttValidate(processedValues);
    return dttPostprocess(processedValues);
  }

  static Map<String, dynamic> dttPreprocess(Map<String, dynamic> values) {
    // Preprocessing step - modify values before validation
    values['bio'] = Profile._dttpreprocess_bio(values['bio']);
    return values;
  }

  static void dttValidate(Map<String, dynamic> values) {
    if (values['bio'] == null) {
      throw DttValidationError('bio', 'bio is required');
    }
    if (values['bio'] != null && values['bio'].length < 1) {
      throw DttValidationError('bio', 'bio must be at least 1 characters');
    }
    if (values['website'] != null && values['website'].length < 3) {
      throw DttValidationError(
        'website',
        'website must be at least 3 characters',
      );
    }
    if (values['website'] != null && values['website'].length > 20) {
      throw DttValidationError(
        'website',
        'website must be at most 20 characters',
      );
    }
    if (values['website'] != null &&
        !Profile._dttvalidate_website(values['website'])) {
      throw DttValidationError('website', 'website failed custom validation');
    }
  }

  static Map<String, dynamic> dttPostprocess(Map<String, dynamic> values) {
    // Postprocessing step - modify values after validation
    // No postprocessing methods found
    return values;
  }

  static Map<String, dynamic> dttFromMap(Map<String, dynamic> map) {
    // Process and validate map data (including nested models)
    final processedMap = <String, dynamic>{
      'bio': map['bio'],
      'website': map['website'],
      'user': _$UserMixin.dttFromMap(map['user'] as Map<String, dynamic>),
    };
    // Apply preprocessing, validation, and postprocessing to the processed map
    final preprocessed = dttPreprocess(processedMap);
    dttValidate(preprocessed);
    return dttPostprocess(preprocessed);
  }

  static Map<String, dynamic> dttToMap(Profile obj) {
    // Convert object instance to a map
    return {
      'bio': obj.bio,
      'website': obj.website,
      'user': _$UserMixin.dttToMap(obj.user),
    };
  }
}
