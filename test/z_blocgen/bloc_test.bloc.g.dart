// GENERATED BY DARTANTIC BLOC GENERATOR

part of 'bloc_test.dart';

abstract class DttBlocTestUserState extends Equatable {
  const DttBlocTestUserState();
  @override
  List<Object?> get props => [];

  static DttBlocTestUserState initial() => const DttBlocTestUserInitial();
  static DttBlocTestUserState loading() => const DttBlocTestUserLoading();
  static DttBlocTestUserState error(String message) => DttBlocTestUserError(message);
  static DttBlocTestUserState success(DttBlocTestUserStateData data) => data;
}

class DttBlocTestUserStateData extends DttBlocTestUserState {
  final String name;
  final int age;
  final String? email;
  const DttBlocTestUserStateData({
    required this.name,
    required this.age,
    this.email,
  });
  factory DttBlocTestUserStateData.fromMap(Map<String, dynamic> map) {
    return DttBlocTestUserStateData(
      name: map['name'] as String,
      age: map['age'] as int,
      email: map['email'] as String?,
    );
  }
  Map<String, dynamic> toMap() => {
    'name': name,
    'age': age,
    'email': email,
  };
  DttBlocTestUserStateData copyWith({
    String? name,
    int? age,
    String? email,
  }) => DttBlocTestUserStateData(
    name: name ?? this.name,
    age: age ?? this.age,
    email: email ?? this.email,
  );
  @override
  List<Object?> get props => [
    name,
    age,
    email,
  ];
}

class DttBlocTestUserLoading extends DttBlocTestUserState {
  const DttBlocTestUserLoading();
}

class DttBlocTestUserError extends DttBlocTestUserState {
  final String message;
  const DttBlocTestUserError(this.message);
  @override
  List<Object?> get props => [message];
}

class DttBlocTestUserInitial extends DttBlocTestUserState {
  const DttBlocTestUserInitial();
}

abstract class DttBlocTestUserEvent extends Equatable {
  const DttBlocTestUserEvent();
  @override
  List<Object?> get props => [];
}

class DttBlocTestUserUpdateName extends DttBlocTestUserEvent {
  final String name;
  const DttBlocTestUserUpdateName(this.name);
  @override
  List<Object?> get props => [name];
}

class DttBlocTestUserUpdateAge extends DttBlocTestUserEvent {
  final int age;
  const DttBlocTestUserUpdateAge(this.age);
  @override
  List<Object?> get props => [age];
}

class DttBlocTestUserUpdateEmail extends DttBlocTestUserEvent {
  final String? email;
  const DttBlocTestUserUpdateEmail(this.email);
  @override
  List<Object?> get props => [email];
}

class DttBlocTestUserLoad extends DttBlocTestUserEvent {
  const DttBlocTestUserLoad();
}

class DttBlocTestUserSave extends DttBlocTestUserEvent {
  const DttBlocTestUserSave();
}

class DttBlocTestUserReset extends DttBlocTestUserEvent {
  const DttBlocTestUserReset();
}

class DttBlocTestUserValidate extends DttBlocTestUserEvent {
  const DttBlocTestUserValidate();
}

class DttBlocTestUserCubit extends Cubit<DttBlocTestUserState> {
  DttBlocTestUserCubit() : super(DttBlocTestUserState.initial());

  void updateName(String name) {
    if (isClosed) return;
    if (state is DttBlocTestUserStateData) {
      final currentState = state as DttBlocTestUserStateData;
      final processedName = TestUser._dttpreprocess_name(name);
      emit(currentState.copyWith(name: processedName));
    }
  }

  void updateAge(int age) {
    if (isClosed) return;
    if (state is DttBlocTestUserStateData) {
      final currentState = state as DttBlocTestUserStateData;
      if (!TestUser._dttvalidate_age(age)) {
        emit(DttBlocTestUserState.error('Invalid age: age'));
        return;
      }
      emit(currentState.copyWith(age: age));
    }
  }

  void updateEmail(String? email) {
    if (isClosed) return;
    if (state is DttBlocTestUserStateData) {
      final currentState = state as DttBlocTestUserStateData;
      emit(currentState.copyWith(email: email));
    }
  }

  Future<void> loadData(Map<String, dynamic> data) async {
    if (isClosed) return;
    emit(DttBlocTestUserState.loading());
    try {
      final stateData = DttBlocTestUserStateData.fromMap(data);
      if (!TestUser._dttvalidate_age(stateData.age)) {
        emit(DttBlocTestUserState.error('Invalid age: ${stateData.age}'));
        return;
      }
      emit(stateData);
    } catch (e) {
      emit(DttBlocTestUserState.error(e.toString()));
    }
  }

  Future<void> saveData() async {
    if (isClosed) return;
    if (state is! DttBlocTestUserStateData) return;
    emit(DttBlocTestUserState.loading());
    try {
      final currentState = state as DttBlocTestUserStateData;
      if (!validate()) {
        emit(DttBlocTestUserState.error('Validation failed'));
        return;
      }
      // TODO: Implement actual save logic
      emit(currentState);
    } catch (e) {
      emit(DttBlocTestUserState.error(e.toString()));
    }
  }

  void reset() {
    if (isClosed) return;
    emit(DttBlocTestUserState.initial());
  }

  bool validate() {
    if (state is! DttBlocTestUserStateData) return false;
    final data = state as DttBlocTestUserStateData;
    return TestUser._dttvalidate_age(data.age);
  }

}
