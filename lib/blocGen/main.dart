import 'dart:async';
import 'package:build/build.dart';
import 'package:source_gen/source_gen.dart';
import '../modelGen/annotations/annotations.dart';
import 'package:analyzer/dart/element/element.dart';

// Import bloc generators
import 'generators/bloc_state.dart';
import 'generators/bloc_event.dart';
import 'generators/bloc_cubit.dart';

// Import utilities
import 'utils/metadata_parser.dart';
import 'utils/bloc_utils.dart';

class BlocGenerator extends GeneratorForAnnotation<DttBloc> {
  @override
  Future<String> generateForAnnotatedElement(
    Element element,
    ConstantReader annotation,
    BuildStep buildStep,
  ) async {
    if (element is! ClassElement) {
      throw InvalidGenerationSourceError(
        '`@dttBloc` can only be applied to classes.',
        element: element,
      );
    }

    // Check if class also has @dttModel annotation
    bool hasDttModel = false;
    for (final meta in element.metadata) {
      final obj = meta.computeConstantValue();
      if (obj?.type?.getDisplayString(withNullability: false) == 'DttModel') {
        hasDttModel = true;
        break;
      }
    }

    if (!hasDttModel) {
      throw InvalidGenerationSourceError(
        '`@dttBloc` requires the class to also have @dttModel annotation.',
        element: element,
      );
    }

    // Parse metadata from corresponding .dartantic.g.dart file
    final metadata = await MetadataParser.parseGeneratedFile(
      element,
      buildStep,
    );

    if (metadata == null) {
      throw InvalidGenerationSourceError(
        '`@dttBloc` requires the class to have @dttModel annotation and generated .dartantic.g.dart file.',
        element: element,
      );
    }

    // Generate bloc components using modular generators
    final blocComponents = [
      BlocStateGenerator.generate(element, metadata).source,
      BlocEventGenerator.generate(element, metadata).source,
      BlocCubitGenerator.generate(element, metadata).source,
    ];

    return '''
// **************************************************************************
// BlocGenerator
// **************************************************************************

${blocComponents.join('\n\n')}
''';
  }
}

Builder blocGeneratorBuilder(BuilderOptions options) => PartBuilder(
  [BlocGenerator()],
  '.bloc.g.dart',
  header: '// GENERATED BY DARTANTIC BLOC GENERATOR\n',
);
